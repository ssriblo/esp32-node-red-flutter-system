#include <stdio.h>
#include <stdlib.h>
#include <Arduino.h>

typedef struct {
    float Cp;      // тепловая ёмкость
    float U;       // коэффициент теплопотерь
    float alpha;   // перевод мощности в тепловую энергию
    float Tamb;    // температура окружающей среды
    float tau;     // постоянная времени задержки (сенсор)
    float dt;      // шаг интегрирования
    float T;       // температура "комнаты"
    float Ts;      // измеренная температура (датчик)
} HeaterModel;

// Инициализация модели
void init_model(HeaterModel *m, float Cp, float U, float alpha,
                float Tamb, float tau, float dt, float T0, float Ts0) {
    m->Cp = Cp;
    m->U = U;
    m->alpha = alpha;
    m->Tamb = Tamb;
    m->tau = tau;
    m->dt = dt;
    m->T = T0;
    m->Ts = Ts0;
}

// Шаг моделирования
void step_model(HeaterModel *m, float P_heater) {
    float dT = ( -m->U * (m->T - m->Tamb) + m->alpha * P_heater ) / m->Cp;
    m->T += dT * m->dt;

    float dTs = (m->T - m->Ts) / m->tau;
    m->Ts += dTs * m->dt;
}

void setup(void) {
    delay(1000);
    const int STEPS = 600;
    float dt = 1.0;
    HeaterModel model;
    init_model(&model,
               100.0,   // Cp
               0.01,     // U
               20.0,    // alpha
               20.0,    // Tamb
               150.0,     // tau
               dt,
               20.0,    // начальная комната
               20.0);   // начальный датчик

    // float *P = malloc(sizeof(float) * STEPS);
    // float *T = malloc(sizeof(float) * STEPS);
    // float *Ts = malloc(sizeof(float) * STEPS);
    float *P = static_cast<float*>(malloc(sizeof(float) * STEPS));
    float *T = static_cast<float*>(malloc(sizeof(float) * STEPS));
    float *Ts = static_cast<float*>(malloc(sizeof(float) * STEPS));

    if (!P || !T || !Ts) {
        fprintf(stderr, "Ошибка выделения памяти\n");
        // return 1;
    }
    for (int i = 0; i < STEPS; i++) {
        P[i] = (i >= 10 && i < 310) ? 1.0 : 0.0;
    }

    for (int i = 0; i < STEPS; i++) {
        P[i] = P[i]; // значение уже задано
        T[i] = model.T;
        Ts[i] = model.Ts;
        step_model(&model, P[i]);
    }

    // Вывод результатов (например, в CSV формат)
    printf("step,heater_power,T_room,T_sensor\n");
    for (int i = 0; i < STEPS; i++) {
        printf("%d,%.3f,%.3f,%.3f\n", i, P[i], T[i], Ts[i]);
    }

    free(P);
    free(T);
    free(Ts);
    // return 0;
}

void loop() {
}